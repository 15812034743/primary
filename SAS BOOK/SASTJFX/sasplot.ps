define style Styles.Default;
   class fonts
      "Fonts used in the default style" /
      'docFont' = ("<sans-serif>, Helvetica, sans-serif",3)
      'headingFont' = ("<sans-serif>, Helvetica, sans-serif",4,bold)
      'headingEmphasisFont' = ("<sans-serif>, Helvetica, sans-serif",4,bold italic)
      'FixedFont' = ("<monospace>, Courier, sans-serif",2)
      'BatchFixedFont' = ("<monospace>, Courier, monospace, sans-serif",2)
      'FixedHeadingFont' = ("<monospace>, Courier, monospace, sans-serif",2)
      'FixedStrongFont' = ("<monospace>, Courier, monospace, sans-serif",2,bold)
      'FixedEmphasisFont' = ("<monospace>, Courier, monospace, sans-serif",2,italic)
      'EmphasisFont' = ("<sans-serif>, Helvetica, sans-serif",3,italic)
      'StrongFont' = ("<sans-serif>, Helvetica, sans-serif",4,bold)
      'TitleFont' = ("<sans-serif>, Helvetica, sans-serif",5,bold italic)
      'TitleFont2' = ("<sans-serif>, Helvetica, sans-serif",4,bold italic);
   class GraphFonts
      "Fonts used in graph styles" /
      'GraphAnnoFont' = ("<sans-serif>, <MTsans-serif>, sans-serif",10pt)
      'GraphTitle1Font' = ("<sans-serif>, <MTsans-serif>, sans-serif",14pt,bold)
      'GraphTitleFont' = ("<sans-serif>, <MTsans-serif>, sans-serif",11pt,bold)
      'GraphFootnoteFont' = ("<sans-serif>, <MTsans-serif>, sans-serif",10pt)
      'GraphLabelFont' = ("<sans-serif>, <MTsans-serif>, sans-serif",10pt,bold)
      'GraphLabel2Font' = ("<sans-serif>, <MTsans-serif>, sans-serif",10pt)
      'GraphValueFont' = ("<sans-serif>, <MTsans-serif>, sans-serif",9pt)
      'GraphUnicodeFont' = ("<MTsans-serif-unicode>, sans-serif",9pt)
      'GraphDataFont' = ("<sans-serif>, <MTsans-serif>, sans-serif",7pt);
   class color_list
      "Colors used in the default style" /
      'bgA' = cxE0E0E0
      'fgA' = cx002288
      'bgA1' = cxF0F0F0
      'fgA1' = cx000000
      'bgA2' = cxB0B0B0
      'fgA2' = cx0033AA
      'bgA3' = cxD3D3D3
      'bgA4' = cx880000
      'fgA4' = cxAAFFAA
      'fgB1' = cx004488
      'fgB2' = cx0066AA;
   class colors
      "Abstract colors used in the default style" /
      'docbg' = color_list('bgA')
      'docfg' = color_list('fgA')
      'contentbg' = color_list('bgA2')
      'contentfg' = color_list('fgA2')
      'link1' = color_list('fgB1')
      'link2' = color_list('fgB2')
      'Contitlefg' = color_list('fgA')
      'Confolderfg' = color_list('fgA')
      'Conentryfg' = color_list('fgA2')
      'systitlebg' = color_list('bgA')
      'systitlefg' = color_list('fgA')
      'titlebg' = color_list('bgA')
      'titlefg' = color_list('fgA')
      'proctitlebg' = color_list('bgA')
      'proctitlefg' = color_list('fgA')
      'captionbg' = color_list('bgA')
      'captionfg' = color_list('fgA1')
      'bylinebg' = color_list('bgA2')
      'bylinefg' = color_list('fgA2')
      'notebg' = color_list('bgA')
      'notefg' = color_list('fgA')
      'tablebg' = color_list('bgA1')
      'tableborder' = color_list('fgA1')
      'batchbg' = color_list('bgA3')
      'batchfg' = color_list('fgA1')
      'databg' = color_list('bgA3')
      'datafg' = color_list('fgA1')
      'databgstrong' = color_list('bgA3')
      'datafgstrong' = color_list('fgA1')
      'databgemph' = color_list('bgA3')
      'datafgemph' = color_list('fgA1')
      'headerbg' = color_list('bgA2')
      'headerfg' = color_list('fgA2')
      'headerbgstrong' = color_list('bgA2')
      'headerfgstrong' = color_list('fgA2')
      'headerbgemph' = color_list('bgA2')
      'headerfgemph' = color_list('fgA2');
   class GraphColors
      "Abstract colors used in graph styles" /
      'gdata1' = cx7C95CA
      'gdata2' = cxDE7E6F
      'gdata3' = cx66A5A0
      'gdata5' = cxB689CD
      'gdata4' = cxA9865B
      'gdata7' = cx94BDE1
      'gdata6' = cxBABC5C
      'gdata8' = cxCD7BA1
      'gdata9' = cxCF974B
      'gdata10' = cx87C873
      'gdata11' = cxB7AEF1
      'gdata12' = cxDDD17E
      'gcdata1' = cx2A25D9
      'gcdata2' = cxB2182B
      'gcdata3' = cx01665E
      'gcdata5' = cx9D3CDB
      'gcdata4' = cx543005
      'gcdata7' = cx2597FA
      'gcdata6' = cx7F8E1F
      'gcdata8' = cxB26084
      'gcdata9' = cxD17800
      'gcdata10' = cx47A82A
      'gcdata11' = cxB38EF3
      'gcdata12' = cxF9DA04
      'gwalls' = cxFFFFFF
      'gfloor' = cxFFFFFF
      'glegend' = cxFFFFFF
      'gshadow' = cx000000
      'gaxis' = cx000000
      'ggrid' = cxECECEC
      'goutlines' = cx000000
      'gborderlines' = cx000000
      'glabel' = cx000000
      'gtext' = cx000000
      'gramp2cstart' = cxEDEBF6
      'gramp2cend' = cx5E528B
      'gconramp2cstart' = cxF3F7FE
      'gconramp2cend' = cx6497EB
      'gramp3cstart' = cx6497EB
      'gramp3cneutral' = cxFFFFFF
      'gramp3cend' = cxDD6060
      'gconramp3cstart' = cx0000FF
      'gconramp3cneutral' = cxFF00FF
      'gconramp3cend' = cxFF0000
      'gheader' = colors('docbg')
      'greferencelines' = cx808080
      'gdata' = cxB9CFE7
      'gcdata' = cx000000
      'goutlier' = cxB9CFE7
      'gcoutlier' = cx000000
      'gfit' = cx003178
      'gfit2' = cx780000
      'gcfit' = cx003178
      'gcfit2' = cx780000
      'gconfidence' = cxB9CFE7
      'gconfidence2' = cxE7B9B9
      'gcconfidence' = cx003178
      'gcconfidence2' = cx780000
      'gpredict' = cx003178
      'gcpredict' = cx003178
      'gpredictlim' = cxB9CFE7
      'gcpredictlim' = cx003178
      'gerror' = cxB9CFE7
      'gcerror' = cx000000
      'gcontrollim' = cxE6F2FF
      'gccontrollim' = cxBFC7D9
      'gruntest' = cxCAE3FF
      'gcruntest' = cxBF4D4D
      'gstars' = cxB9CFE7
      'gcstars' = cx000000
      'gclipping' = cxE7774F
      'gcclipping' = cxDC531F
      'gblock' = cxD7DFEF
      'gablock' = cxF1F0F6
      'gmiss' = cxc3c3c2
      'gcmiss' = cx979797;
   class html
      "Common HTML text used in the default style" /
      'fake bullet' = %nrstr("<b>&#183;</b>")
      'PageBreakLine' = "<p style=""page-break-after: always;""><br></p><hr size=""3"">"
      'Line' = "<hr size=""3"">"
      'break' = "<br>"
      'prehtml flyover' = "<span>"
      'posthtml flyover' = "</span>"
      'prehtml flyover bullet' = %nrstr("<span><b>&#183;</b>")
      'prehtml flyover line' = "<span><hr size=""3"">"
      'posthtml flyover line' = "</span><hr size=""3"">"
      'expandAll' = "<span onclick=""expandCollapse()"">";
   class text
      "Common text." /
      'prefix1' = ""
      'suffix1' = "过程"
      'Content Title' = "目录"
      'Pages Title' = "页码表"
      'Note Banner' = "Note:"
      'Warn Banner' = "Warning:"
      'Error Banner' = "Error:"
      'Fatal Banner' = "Fatal:"
      'continued' = "(Continued)";
   class Container /
      backgroundcolor = colors('docbg')
      color = colors('docfg')
      font = Fonts('DocFont');
   class Index /
      backgroundcolor = colors('contentbg')
      color = colors('contentfg');
   class Document /
      visitedlinkcolor = colors('link1')
      activelinkcolor = colors('link1')
      linkcolor = colors('link2')
      protectspecialchars = auto
      contenttype = "text/html"
      doctype = "<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2 Final//EN"">";
   class Body /
      pagebreakhtml = html('PageBreakLine')
      marginleft = 8
      marginright = 8;
   class Frame /
      frameborder = on
      frameborderwidth = 4
      framespacing = 1
      contentsize = 23%
      contentscrollbar = auto
      bodysize = *
      bodyscrollbar = auto
      contentposition = left;
   class Contents /
      marginleft = 8
      marginright = 8
      backgroundcolor = colors('contentbg')
      color = colors('contentfg')
      pagebreakhtml = html('break')
      tagattr = " onload=""expandAll()"""
      liststyletype = "decimal";
   class Pages /
      marginleft = 8
      marginright = 8
      backgroundcolor = colors('contentbg')
      color = colors('contentfg')
      pagebreakhtml = html('break')
      tagattr = " onload=""expandAll()"""
      liststyletype = "decimal";
   class Date /
      color = colors('contentfg')
      backgroundcolor = colors('contentbg')
      width = 100%;
   class BodyDate /
      color = colors('docfg')
      backgroundcolor = colors('docbg')
      cellpadding = 0
      borderspacing = 0
      textalign = right
      verticalalign = top;
   class IndexItem /
      color = colors('conentryfg')
      backgroundcolor = _undef_
      liststyletype = NONE
      listentryanchor = on
      prehtml = html('prehtml flyover bullet')
      posthtml = html('posthtml flyover')
      marginleft = 6pt;
   class ContentFolder /
      color = colors('confolderfg')
      listentryanchor = off;
   class ByContentFolder /
      listentryanchor = on;
   class IndexProcName /
      color = colors('contitlefg')
      backgroundcolor = _undef_
      pretext = text('prefix1')
      posttext = text('suffix1')
      prehtml = html('prehtml flyover')
      posthtml = html('posthtml flyover')
      liststyletype = "decimal"
      listentryanchor = off;
   class ContentProcLabel /
      pretext = _undef_
      posttext = _undef_;
   class PagesProcLabel /
      pretext = _undef_
      posttext = _undef_;
   class IndexTitle /
      color = colors('contitlefg')
      backgroundcolor = _undef_
      font = fonts('EmphasisFont')
      prehtml = html('expandAll')
      posthtml = html('posthtml flyover line');
   class ContentTitle /
      pretext = text('content title');
   class PagesTitle /
      pretext = text('pages title');
   class SysTitleAndFooterContainer /
      borderwidth = 0
      borderspacing = 1
      cellpadding = 1
      width = 100%
      frame = VOID
      rules = NONE;
   class TitleAndNoteContainer /
      borderwidth = 0
      borderspacing = 1
      cellpadding = 1
      width = 100%
      frame = VOID
      rules = NONE;
   class TitlesAndFooters /
      color = colors('systitlefg')
      backgroundcolor = colors('systitlebg')
      font = Fonts('TitleFont2');
   class BylineContainer /
      borderwidth = 0
      borderspacing = 1
      cellpadding = 1
      width = 100%
      frame = VOID
      rules = NONE
      backgroundcolor = colors('Docbg');
   class SystemTitle /
      font = Fonts('TitleFont');
   class SystemFooter /
      font = Fonts('TitleFont');
   class PageNo /
      font = fonts('strongFont')
      cellpadding = 0
      borderspacing = 0
      textalign = right
      verticalalign = top;
   class ExtendedPage /
      font = fonts('EmphasisFont')
      frame = box
      pretext = "Continuing contents of page "
      posttext = ", which would not fit on a single physical page"
      fillrulewidth = 0.5pt
      borderwidth = 1pt
      cellpadding = 2pt
      textalign = center;
   class Byline /
      color = colors('bylinefg')
      backgroundcolor = colors('bylinebg')
      font = fonts('headingFont')
      cellpadding = 0
      borderspacing = 0;
   class Parskip /
      font = fonts('headingFont')
      cellpadding = 0
      borderspacing = 0
      frame = void
      rules = NONE
      borderwidth = 0
      color = _undef_
      backgroundcolor = _undef_;
   class Continued /
      font = fonts('headingFont')
      cellpadding = 0
      borderspacing = 0
      pretext = text('continued')
      width = 100%
      textalign = left;
   class ProcTitle /
      color = colors('proctitlefg')
      backgroundcolor = colors('proctitlebg');
   class ProcTitleFixed /
      font = fonts('FixedStrongFont');
   class Output /
      borderwidth = 1
      bordercolor = colors('tableborder')
      borderspacing = 1
      cellpadding = 7
      frame = BOX
      rules = GROUPS
      backgroundcolor = colors('tablebg')
      bordercollapse = separate;
   class Table;
   class Batch /
      padding = 7
      backgroundcolor = colors('batchbg')
      color = colors('batchfg')
      font = fonts('BatchFixedFont');
   class Note /
      color = colors('notefg')
      backgroundcolor = colors('notebg');
   class NoteBanner /
      pretext = text('Note Banner')
      fontweight = bold;
   class UserText /
      textalign = left;
   class PrePage /
      textalign = left;
   class NoteContentFixed /
      font = fonts('FixedFont');
   class WarnBanner /
      pretext = text('Warn Banner')
      fontweight = bold;
   class WarnContentFixed /
      font = fonts('FixedFont');
   class ErrorBanner /
      pretext = text('Error Banner')
      fontweight = bold;
   class ErrorContentFixed /
      font = fonts('FixedFont');
   class FatalBanner /
      pretext = text('Fatal Banner')
      fontweight = bold;
   class FatalContentFixed /
      font = fonts('FixedFont');
   class Data /
      backgroundcolor = colors('databg')
      color = colors('datafg');
   class DataFixed /
      font = fonts('FixedFont');
   class DataEmphasis /
      font = fonts('EmphasisFont')
      backgroundcolor = colors('databgemph')
      color = colors('datafgemph');
   class DataEmphasisFixed /
      font = fonts('FixedEmphasisFont');
   class DataStrong /
      font = fonts('StrongFont')
      backgroundcolor = colors('databgstrong')
      color = colors('datafgstrong');
   class DataStrongFixed /
      font = fonts('FixedStrongFont');
   class HeadersAndFooters /
      backgroundcolor = colors('headerbg')
      color = colors('headerfg')
      font = fonts('HeadingFont');
   class Caption /
      backgroundcolor = colors('captionbg')
      color = colors('captionfg')
      cellpadding = 0
      borderspacing = 0;
   class AfterCaption /
      paddingtop = 4pt;
   class Header;
   class HeaderFixed /
      font = fonts('FixedFont');
   class HeaderEmphasis /
      font = fonts('EmphasisFont')
      backgroundcolor = colors('headerbgemph')
      color = colors('headerfgemph');
   class HeaderEmphasisFixed /
      font = fonts('FixedEmphasisFont');
   class HeaderStrong /
      font = fonts('StrongFont')
      backgroundcolor = colors('headerbgstrong')
      color = colors('headerfgstrong');
   class HeaderStrongFixed /
      font = fonts('FixedStrongFont');
   class RowHeader;
   class RowHeaderFixed /
      font = fonts('FixedFont');
   class RowHeaderEmphasis /
      font = fonts('EmphasisFont');
   class RowHeaderEmphasisFixed /
      font = fonts('FixedEmphasisFont');
   class RowHeaderStrong /
      font = fonts('StrongFont');
   class RowHeaderStrongFixed /
      font = fonts('FixedStrongFont');
   class Footer;
   class FooterFixed /
      font = fonts('FixedFont');
   class FooterEmphasis /
      font = fonts('EmphasisFont');
   class FooterEmphasisFixed /
      font = fonts('FixedEmphasisFont');
   class FooterStrong /
      font = fonts('StrongFont');
   class FooterStrongFixed /
      font = fonts('FixedStrongFont');
   class RowFooter;
   class RowFooterFixed /
      font = fonts('FixedFont');
   class RowFooterEmphasis /
      font = fonts('EmphasisFont');
   class RowFooterEmphasisFixed /
      font = fonts('FixedEmphasisFont');
   class RowFooterStrong /
      font = fonts('StrongFont');
   class RowFooterStrongFixed /
      font = fonts('FixedStrongFont');
   class ListItem /
      font = Fonts('DocFont');
   class Paragraph /
      font = Fonts('DocFont')
      textalign = left;
   class List /
      liststyletype = disc
      textalign = left;
   class List2 /
      liststyletype = circle;
   class List3 /
      liststyletype = square;
   class Graph /
      backgroundcolor = colors('docbg')
      cellpadding = 0;
   class GraphWalls /
      color = GraphColors('gwalls')
      backgroundcolor = GraphColors('gwalls')
      contrastcolor = GraphColors('gaxis')
      frameborder = on
      linestyle = 1
      linethickness = 1px;
   class GraphAxisLines /
      color = GraphColors('gaxis')
      contrastcolor = GraphColors('gaxis')
      linestyle = 1
      linethickness = 1px
      tickdisplay = "outside";
   class GraphGridLines /
      color = GraphColors('ggrid')
      contrastcolor = GraphColors('ggrid')
      linestyle = 1
      linethickness = 1px
      displayopts = "auto";
   class GraphOutlines /
      color = GraphColors('goutlines')
      contrastcolor = GraphColors('goutlines')
      linestyle = 1
      linethickness = 1px;
   class GraphBorderLines /
      color = GraphColors('gborderlines')
      contrastcolor = GraphColors('gborderlines')
      linestyle = 1
      linethickness = 1px;
   class GraphReference /
      contrastcolor = GraphColors('greferencelines')
      linestyle = 1
      linethickness = 1px;
   class GraphTitle1Text /
      color = GraphColors('gtext')
      font = GraphFonts('GraphTitle1Font');
   class GraphTitleText /
      color = GraphColors('gtext')
      font = GraphFonts('GraphTitleFont');
   class GraphFootnoteText /
      color = GraphColors('gtext')
      font = GraphFonts('GraphFootnoteFont');
   class GraphDataText /
      color = GraphColors('gtext')
      font = GraphFonts('GraphDataFont');
   class GraphLabelText /
      color = GraphColors('glabel')
      font = GraphFonts('GraphLabelFont');
   class GraphLabel2Text /
      color = GraphColors('glabel')
      font = GraphFonts('GraphLabel2Font');
   class GraphValueText /
      color = GraphColors('gtext')
      font = GraphFonts('GraphValueFont');
   class GraphUnicodeText /
      font = GraphFonts('GraphUnicodeFont');
   class GraphBackground /
      color = colors('docbg')
      backgroundcolor = colors('docbg');
   class GraphFloor /
      color = GraphColors('gfloor')
      backgroundcolor = GraphColors('gfloor');
   class GraphLegendBackground /
      color = GraphColors('glegend')
      backgroundcolor = GraphColors('glegend');
   class GraphHeaderBackground /
      color = GraphColors('gheader')
      backgroundcolor = GraphColors('gheader');
   class DropShadowStyle /
      color = GraphColors('gshadow');
   class GraphDataDefault /
      color = GraphColors('gdata')
      contrastcolor = GraphColors('gcdata')
      linestyle = 1
      linethickness = 1px
      markersymbol = "circle"
      markersize = 7px
      startcolor = GraphColors('gramp3cstart')
      neutralcolor = GraphColors('gramp3cneutral')
      endcolor = GraphColors('gramp3cend');
   class GraphData1 /
      color = GraphColors('gdata1')
      contrastcolor = GraphColors('gcdata1')
      linestyle = 1
      markersymbol = "circle";
   class GraphData2 /
      color = GraphColors('gdata2')
      contrastcolor = GraphColors('gcdata2')
      linestyle = 4
      markersymbol = "plus";
   class GraphData3 /
      color = GraphColors('gdata3')
      contrastcolor = GraphColors('gcdata3')
      linestyle = 8
      markersymbol = "X";
   class GraphData4 /
      color = GraphColors('gdata4')
      contrastcolor = GraphColors('gcdata4')
      linestyle = 5
      markersymbol = "triangle";
   class GraphData5 /
      color = GraphColors('gdata5')
      contrastcolor = GraphColors('gcdata5')
      linestyle = 14
      markersymbol = "square";
   class GraphData6 /
      color = GraphColors('gdata6')
      contrastcolor = GraphColors('gcdata6')
      linestyle = 26
      markersymbol = "asterisk";
   class GraphData7 /
      color = GraphColors('gdata7')
      contrastcolor = GraphColors('gcdata7')
      linestyle = 15
      markersymbol = "diamond";
   class GraphData8 /
      color = GraphColors('gdata8')
      contrastcolor = GraphColors('gcdata8')
      linestyle = 20;
   class GraphData9 /
      color = GraphColors('gdata9')
      contrastcolor = GraphColors('gcdata9')
      linestyle = 41;
   class GraphData10 /
      color = GraphColors('gdata10')
      contrastcolor = GraphColors('gcdata10')
      linestyle = 42;
   class GraphData11 /
      color = GraphColors('gdata11')
      contrastcolor = GraphColors('gcdata11')
      linestyle = 2;
   class GraphData12 /
      color = GraphColors('gdata12')
      contrastcolor = GraphColors('gcdata12');
   class TwoColorRamp /
      startcolor = GraphColors('gramp2cstart')
      endcolor = GraphColors('gramp2cend');
   class TwoColorAltRamp /
      startcolor = GraphColors('gconramp2cstart')
      endcolor = GraphColors('gconramp2cend');
   class ThreeColorRamp /
      startcolor = GraphColors('gramp3cstart')
      neutralcolor = GraphColors('gramp3cneutral')
      endcolor = GraphColors('gramp3cend');
   class ThreeColorAltRamp /
      startcolor = GraphColors('gconramp3cstart')
      neutralcolor = GraphColors('gconramp3cneutral')
      endcolor = GraphColors('gconramp3cend');
   class GraphOutlier /
      color = GraphColors('goutlier')
      contrastcolor = GraphColors('gcoutlier')
      markersymbol = "circle"
      markersize = 7px
      linestyle = 42
      linethickness = 2px;
   class GraphFit /
      color = GraphColors('gfit')
      contrastcolor = GraphColors('gcfit')
      markersymbol = "circle"
      markersize = 7px
      linestyle = 1
      linethickness = 2px;
   class GraphFit2 /
      color = GraphColors('gfit2')
      contrastcolor = GraphColors('gcfit2')
      markersymbol = "X"
      markersize = 7px
      linestyle = 4
      linethickness = 2px;
   class GraphConfidence /
      color = GraphColors('gconfidence')
      contrastcolor = GraphColors('gcconfidence')
      markersymbol = "triangle"
      markersize = 7px
      linestyle = 1
      linethickness = 1px;
   class GraphConfidence2 /
      color = GraphColors('gconfidence2')
      contrastcolor = GraphColors('gcconfidence2')
      markersymbol = "diamond"
      markersize = 7px
      linestyle = 4
      linethickness = 1px;
   class GraphPrediction /
      color = GraphColors('gpredict')
      contrastcolor = GraphColors('gcpredict')
      markersymbol = "plus"
      markersize = 7px
      linestyle = 4
      linethickness = 2px;
   class GraphPredictionLimits /
      color = GraphColors('gpredictlim')
      contrastcolor = GraphColors('gcpredictlim')
      markersymbol = "chain"
      markersize = 7px
      linestyle = 2
      linethickness = 1px;
   class GraphError /
      color = GraphColors('gerror')
      contrastcolor = GraphColors('gcerror')
      markersymbol = "asterisk"
      markersize = 7px
      linestyle = 1
      linethickness = 1px;
   class GraphBar /
      displayopts = "fill outline";
   class GraphBox /
      displayopts = "fill caps median mean outliers"
      connect = "mean"
      capstyle = "serif";
   class GraphBoxMedian /
      contrastcolor = GraphColors('gcdata')
      linethickness = 1px
      linestyle = 1;
   class GraphBoxMean /
      contrastcolor = GraphColors('gcdata')
      markersymbol = "diamond"
      markersize = 9px;
   class GraphBoxWhisker /
      contrastcolor = GraphColors('gcdata')
      linethickness = 1px
      linestyle = 1;
   class GraphHistogram /
      displayopts = "fill outline";
   class GraphEllipse /
      displayopts = "outline";
   class GraphBand /
      displayopts = "fill";
   class GraphContour /
      displayopts = "LabeledLineGradient";
   class GraphBlock /
      color = GraphColors('gblock');
   class GraphAltBlock /
      color = GraphColors('gablock');
   class GraphAnnoLine /
      contrastcolor = GraphColors('gcdata')
      linethickness = 2px
      linestyle = 1;
   class GraphAnnoText /
      color = GraphColors('gtext')
      font = GraphFonts('GraphAnnoFont');
   class GraphAnnoShape /
      color = GraphColors('gdata')
      contrastcolor = GraphColors('gcdata')
      linestyle = 1
      linethickness = 2px
      markersymbol = "starfilled"
      markersize = 12px;
   class GraphSelection /
      color = GraphColors('gdata')
      contrastcolor = GraphColors('gcdata')
      linestyle = 1
      linethickness = 5px
      markersymbol = "square"
      markersize = 11px;
   class GraphConnectLine /
      contrastcolor = GraphColors('gcdata')
      linethickness = 1px
      linestyle = 1;
   class GraphMissing /
      color = GraphColors('gmiss')
      contrastcolor = GraphColors('gcmiss')
      linestyle = 2
      linethickness = 1px
      markersymbol = "hash"
      markersize = 7px;
   class GraphControlLimits /
      color = GraphColors('gcontrollim')
      contrastcolor = GraphColors('gccontrollim')
      linestyle = 1
      linethickness = 1px
      markersymbol = "circle"
      markersize = 7px;
   class GraphRunTest /
      color = GraphColors('gruntest')
      contrastcolor = GraphColors('gcruntest')
      linestyle = 1
      linethickness = 2px
      markersymbol = "square"
      markersize = 7px;
   class GraphStars /
      color = GraphColors('gstars')
      contrastcolor = GraphColors('gcstars')
      linestyle = 1
      linethickness = 2px;
   class GraphClipping /
      color = GraphColors('gclipping')
      contrastcolor = GraphColors('gcclipping')
      linestyle = 2
      linethickness = 2px
      markersymbol = "circlefilled"
      markersize = 7px;
   class LayoutContainer /
      backgroundcolor = _undef_
      rules = none
      frame = void
      borderwidth = 0
      borderspacing = 30
      cellpadding = 0;
end;
